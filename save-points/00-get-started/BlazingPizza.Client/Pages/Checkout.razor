@page "/checkout"
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject OrdersCommands OrdersCommands
@attribute [Authorize]

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="submit" disabled="@isSubmitting">
            Place order
        </button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>

@code {
    bool isSubmitting;

    async Task PlaceOrder()
    {
        isSubmitting = true;
        try
        {
            //await Task.Delay(5000); // Wait 5 seconds
            var newOrderId = await OrdersCommands.PlaceOrder(OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch(AccessTokenNotAvailableException ex)
        {
            isSubmitting = false;
            ex.Redirect();
        }
        finally
        {
            //isSubmitting = false;
        }        
    }
}
